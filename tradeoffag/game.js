//This is the compainion to game.html, and will be used in the backend to calculate overall scores.
var pts_agcarb = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 75, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 75, 75, 75, 50, 50, 50, 50, 50, 50, 50, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 25, 75, 50, 75, 50, 75, 50, 50, 75, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 75, 50, 50, 50, 75, 50, 50, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 75, 75, 75, 50, 50, 50, 25, 50, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 75, 50, 50, 50, 50, 50, 50, 50, 100, 50, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 75, 100, 50, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 75, 50, 50, 50, 50, 50, 50, 25, 75, 75, 75, 50, 50, 50, 0, 0] , [0, 0, 0, 0, 0, 50, 50, 50, 0, 0, 0, 50, 50, 50, 50, 50, 75, 50, 50, 50, 75, 100, 50, 75, 25, 25, 25, 50] , [0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 75, 75, 50, 50, 50, 50, 50, 50, 75, 75, 25, 25, 75, 75, 50] , [0, 0, 0, 0, 75, 75, 75, 75, 50, 50, 75, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 25, 25, 25, 25, 50] , [0, 0, 0, 0, 0, 75, 75, 75, 50, 50, 50, 50, 50, 50, 50, 75, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50] , [0, 0, 0, 0, 0, 75, 75, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 0, 0] , [0, 0, 0, 0, 125, 100, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 100, 50, 50, 50, 50, 50, 50, 50, 50, 0, 0, 0] , [0, 0, 0, 0, 100, 75, 50, 50, 50, 50, 75, 75, 50, 50, 50, 50, 100, 75, 25, 25, 25, 50, 50, 50, 50, 0, 0, 0] , [0, 75, 50, 75, 75, 75, 50, 50, 50, 50, 50, 50, 50, 25, 25, 50, 75, 100, 50, 75, 50, 50, 75, 100, 50, 0, 0, 0] , [0, 50, 50, 75, 75, 75, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 100, 75, 75, 25, 75, 100, 100, 0, 0, 0, 0] , [50, 75, 50, 75, 50, 50, 75, 50, 50, 50, 50, 50, 50, 50, 75, 50, 50, 75, 100, 100, 100, 100, 100, 100, 50, 0, 0, 0] , [50, 50, 50, 50, 50, 50, 50, 50, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 100, 100, 125, 125, 125, 100, 50, 0, 0, 0] , [50, 50, 50, 50, 50, 50, 50, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 100, 100, 100, 75, 100, 100, 0, 0, 0, 0] , [0, 0, 50, 50, 50, 50, 0, 0, 0, 0, 50, 75, 50, 50, 25, 25, 50, 50, 75, 75, 75, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 25, 50, 25, 25, 25, 75, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 25, 50, 50, 50, 50, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 75, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_agrec.tif to javascript
var pts_agrec = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 50, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 100, 100, 25, 25, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 25, 50, 25, 25, 100, 100, 25, 25, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 50, 25, 75, 100, 75, 75, 25, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 50, 50, 75, 100, 75, 75, 75, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 75, 100, 100, 100, 75, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 25, 25, 25, 75, 75, 100, 100, 75, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 75, 75, 75, 75, 75, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 25, 25, 25, 25, 25, 100, 100, 75, 50, 50, 25, 25, 25, 0, 0] , [0, 0, 0, 0, 0, 25, 25, 25, 0, 25, 25, 25, 25, 25, 25, 25, 50, 25, 100, 100, 100, 100, 25, 50, 25, 25, 25, 0] , [0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 50, 50, 25, 25, 25, 100, 100, 25, 25, 50, 25, 25, 50, 50, 0] , [0, 0, 0, 0, 25, 50, 25, 25, 25, 25, 50, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0] , [0, 0, 0, 0, 0, 50, 50, 25, 25, 25, 25, 25, 25, 25, 25, 50, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0] , [0, 0, 0, 0, 0, 50, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0] , [0, 0, 0, 0, 125, 75, 25, 25, 125, 75, 75, 25, 25, 25, 25, 25, 75, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0] , [0, 0, 0, 0, 75, 25, 25, 50, 50, 100, 125, 50, 25, 25, 25, 25, 75, 50, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0] , [0, 50, 25, 25, 25, 25, 50, 125, 100, 125, 75, 75, 100, 25, 25, 25, 50, 75, 25, 50, 25, 25, 50, 0, 0, 0, 0, 0] , [0, 25, 25, 25, 25, 25, 125, 100, 50, 125, 50, 50, 100, 50, 25, 25, 25, 75, 50, 50, 25, 25, 100, 100, 0, 0, 0, 0] , [25, 25, 25, 25, 25, 75, 100, 0, 0, 125, 125, 100, 125, 75, 50, 25, 25, 25, 100, 75, 75, 100, 100, 100, 0, 0, 0, 0] , [25, 25, 25, 25, 125, 100, 0, 0, 0, 0, 100, 100, 100, 100, 25, 25, 25, 25, 75, 100, 125, 125, 125, 0, 0, 0, 0, 0] , [25, 25, 25, 25, 25, 0, 0, 0, 0, 0, 50, 50, 75, 25, 25, 25, 25, 25, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 75, 25, 25, 25, 25, 25, 25, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 50, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_crop_ag.tif to javascript
var pts_crop_ag = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 150, 225, 225, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 225, 375, 225, 150, 375, 300, 150, 75, 225, 225, 150, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 150, 300, 225, 225, 375, 375, 150, 150, 225, 225, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 75, 75, 225, 150, 75, 150, 150, 150, 150, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 150, 150, 225, 225, 75, 150, 150, 150, 150, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 375, 375, 300, 300, 300, 75, 75, 225, 375, 225, 150, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 375, 375, 150, 225, 300, 225, 75, 75, 225, 300, 225, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 300, 150, 375, 225, 150, 75, 75, 300, 225, 150, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 375, 300, 375, 300, 150, 300, 300, 75, 150, 150, 225, 375, 375, 300, 0, 0] , [0, 0, 0, 0, 0, 375, 225, 225, 0, 375, 375, 225, 300, 300, 150, 225, 300, 300, 300, 225, 75, 150, 225, 150, 150, 75, 75, 225] , [0, 0, 0, 0, 0, 150, 75, 150, 375, 300, 150, 225, 375, 375, 75, 75, 300, 225, 300, 375, 225, 75, 150, 150, 75, 75, 75, 150] , [0, 0, 0, 0, 0, 300, 75, 75, 375, 375, 375, 375, 375, 375, 150, 75, 375, 150, 75, 375, 300, 150, 150, 150, 225, 75, 75, 225] , [0, 0, 0, 0, 0, 75, 75, 75, 300, 300, 150, 150, 375, 375, 225, 150, 300, 300, 300, 300, 150, 300, 300, 225, 150, 150, 150, 150] , [0, 0, 0, 0, 0, 75, 75, 75, 300, 150, 300, 225, 150, 375, 375, 300, 375, 375, 300, 375, 375, 300, 300, 225, 225, 375, 0, 0] , [0, 0, 0, 0, 375, 75, 75, 150, 150, 300, 300, 375, 150, 375, 225, 225, 75, 300, 225, 150, 300, 300, 225, 225, 300, 0, 0, 0] , [0, 0, 0, 0, 0, 75, 75, 150, 150, 375, 375, 300, 225, 300, 375, 225, 75, 150, 300, 225, 300, 225, 225, 150, 225, 0, 0, 0] , [0, 225, 75, 75, 75, 75, 150, 300, 375, 375, 375, 300, 375, 225, 375, 300, 150, 75, 225, 375, 375, 300, 75, 75, 150, 0, 0, 0] , [0, 300, 75, 75, 75, 75, 300, 300, 300, 375, 300, 300, 375, 300, 300, 225, 225, 75, 75, 150, 225, 150, 75, 75, 0, 0, 0, 0] , [225, 225, 75, 75, 75, 75, 225, 375, 375, 375, 375, 375, 375, 300, 300, 375, 150, 225, 75, 75, 75, 75, 75, 75, 150, 0, 0, 0] , [375, 300, 150, 75, 300, 225, 300, 300, 0, 0, 375, 300, 375, 375, 300, 225, 150, 375, 75, 75, 75, 75, 75, 75, 75, 0, 0, 0] , [375, 375, 225, 150, 225, 225, 375, 0, 0, 0, 300, 300, 225, 375, 375, 150, 150, 225, 75, 75, 375, 300, 75, 75, 0, 0, 0, 0] , [0, 0, 375, 150, 225, 150, 0, 0, 0, 0, 225, 375, 150, 300, 225, 150, 225, 225, 75, 150, 150, 150, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 75, 75, 225, 150, 150, 225, 375, 375, 225, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 150, 150, 225, 300, 375, 300, 300, 225, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 375, 225, 300, 300, 375, 225, 225, 150, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 375, 300, 300, 225, 300, 75, 375, 375, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 300, 300, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_pscarb.tif to javascript
var pts_pscarb = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 50, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 50, 50, 50, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 50, 25, 50, 25, 50, 25, 25, 50, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 50, 25, 25, 25, 50, 25, 25, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 50, 50, 25, 25, 25, 0, 25, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 25, 25, 25, 25, 25, 25, 25, 75, 25, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 50, 75, 25, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 25, 25, 25, 25, 25, 25, 0, 50, 50, 50, 25, 25, 25, 0, 0] , [0, 0, 0, 0, 0, 25, 25, 25, 0, 0, 0, 25, 25, 25, 25, 25, 50, 25, 25, 25, 50, 75, 25, 50, 0, 0, 0, 25] , [0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 50, 50, 25, 25, 25, 25, 25, 25, 50, 50, 0, 0, 50, 50, 25] , [0, 0, 0, 0, 50, 50, 50, 50, 25, 25, 50, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0, 25] , [0, 0, 0, 0, 0, 50, 50, 50, 25, 25, 25, 25, 25, 25, 25, 50, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25] , [0, 0, 0, 0, 0, 50, 50, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0] , [0, 0, 0, 0, 100, 75, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 75, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0] , [0, 0, 0, 0, 75, 50, 25, 25, 25, 25, 50, 50, 25, 25, 25, 25, 75, 50, 0, 0, 0, 25, 25, 25, 25, 0, 0, 0] , [0, 50, 25, 50, 50, 50, 25, 25, 25, 25, 25, 25, 25, 0, 0, 25, 50, 75, 25, 50, 25, 25, 50, 75, 25, 0, 0, 0] , [0, 25, 25, 50, 50, 50, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 75, 50, 50, 0, 50, 75, 75, 0, 0, 0, 0] , [25, 50, 25, 50, 25, 25, 50, 25, 25, 25, 25, 25, 25, 25, 50, 25, 25, 50, 75, 75, 75, 75, 75, 75, 25, 0, 0, 0] , [25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 75, 75, 100, 100, 100, 75, 25, 0, 0, 0] , [25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 75, 75, 75, 50, 75, 75, 0, 0, 0, 0] , [0, 0, 25, 25, 25, 25, 0, 0, 0, 0, 25, 50, 25, 25, 0, 0, 25, 25, 50, 50, 50, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 25, 0, 0, 0, 50, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_psrec.tif to javascript
var pts_psrec = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 25, 0, 0, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 50, 75, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 50, 75, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 75, 75, 75, 50, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 50, 50, 75, 75, 50, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 75, 75, 50, 25, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 75, 75, 75, 75, 0, 25, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 0, 0, 0, 75, 75, 0, 0, 25, 0, 0, 25, 25, 0] , [0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 100, 50, 0, 0, 100, 50, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 50, 0, 0, 25, 25, 75, 100, 25, 0, 0, 0, 0, 50, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 25, 0, 0, 0, 0, 25, 100, 75, 100, 50, 50, 75, 0, 0, 0, 25, 50, 0, 25, 0, 0, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 100, 75, 25, 100, 25, 25, 75, 25, 0, 0, 0, 50, 25, 25, 0, 0, 75, 75, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 50, 75, 0, 0, 100, 100, 75, 100, 50, 25, 0, 0, 0, 75, 50, 50, 75, 75, 75, 0, 0, 0, 0] , [0, 0, 0, 0, 100, 75, 0, 0, 0, 0, 75, 75, 75, 75, 0, 0, 0, 0, 50, 75, 100, 100, 100, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 50, 0, 0, 0, 0, 0, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 0, 0, 0, 0, 0, 0, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_aghq.tif to javascript
var pts_aghq = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 50, 125, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 50, 75, 75, 100, 125, 125, 125, 100, 75, 125, 125, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 100, 75, 50, 50, 75, 75, 125, 125, 50, 125, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 125, 75, 125, 125, 75, 50, 125, 100, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 125, 75, 125, 100, 125, 50, 75, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 100, 125, 125, 75, 75, 100, 125, 125, 125, 50, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 25, 125, 125, 125, 75, 125, 125, 75, 50, 50, 125, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 125, 125, 125, 75, 125, 125, 75, 25, 50, 125, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 50, 75, 100, 125, 75, 125, 125, 75, 50, 25, 50, 125, 75, 50, 0, 0] , [0, 0, 0, 0, 0, 25, 75, 125, 0, 0, 0, 75, 50, 75, 50, 50, 50, 75, 75, 75, 50, 25, 125, 50, 25, 25, 25, 75] , [0, 0, 0, 0, 0, 25, 25, 50, 50, 100, 125, 125, 75, 75, 75, 75, 125, 125, 125, 50, 75, 100, 50, 25, 25, 25, 25, 125] , [0, 0, 0, 0, 25, 25, 25, 25, 125, 50, 50, 50, 50, 125, 100, 50, 125, 125, 125, 125, 75, 125, 25, 75, 75, 25, 25, 125] , [0, 0, 0, 0, 0, 25, 25, 25, 75, 125, 125, 50, 75, 50, 75, 25, 125, 125, 125, 100, 50, 50, 100, 75, 125, 125, 125, 125] , [0, 0, 0, 0, 0, 25, 25, 25, 50, 125, 125, 75, 125, 125, 125, 50, 50, 50, 50, 50, 50, 75, 125, 50, 50, 125, 0, 0] , [0, 0, 0, 0, 0, 25, 25, 125, 125, 125, 125, 75, 125, 125, 75, 50, 25, 50, 100, 125, 75, 125, 125, 75, 125, 0, 0, 0] , [0, 0, 0, 0, 25, 25, 25, 25, 50, 25, 50, 50, 50, 50, 50, 125, 25, 75, 50, 25, 25, 75, 75, 50, 50, 0, 0, 0] , [0, 75, 25, 25, 25, 25, 125, 50, 100, 100, 75, 125, 100, 50, 75, 125, 50, 25, 100, 75, 75, 100, 50, 50, 75, 0, 0, 0] , [0, 75, 25, 25, 25, 25, 125, 75, 125, 125, 75, 125, 75, 125, 75, 125, 125, 25, 75, 75, 25, 100, 25, 25, 0, 0, 0, 0] , [125, 75, 25, 25, 25, 25, 50, 50, 100, 125, 50, 50, 75, 75, 50, 125, 125, 75, 25, 25, 25, 25, 25, 25, 100, 0, 0, 0] , [25, 50, 100, 25, 100, 100, 125, 125, 0, 0, 50, 125, 125, 75, 75, 125, 125, 125, 25, 25, 25, 25, 25, 25, 125, 0, 0, 0] , [125, 100, 125, 125, 125, 100, 125, 0, 0, 0, 50, 125, 125, 75, 50, 75, 125, 75, 25, 25, 25, 75, 25, 25, 0, 0, 0, 0] , [0, 0, 125, 100, 50, 75, 0, 0, 0, 0, 25, 75, 125, 100, 25, 25, 50, 50, 50, 50, 75, 125, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 75, 50, 50, 50, 75, 50, 75, 50, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 100, 75, 50, 75, 75, 75, 75, 125, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 75, 125, 125, 125, 125, 75, 125, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 125, 50, 50, 100, 125, 125, 100, 125, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 50, 75, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_agwq.tif to javascript
var pts_agwq = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 25, 25, 25, 25, 25, 25, 50, 25, 50, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 25, 25, 50, 50, 50, 25, 25, 25, 50, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 50, 50, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 75, 75, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 25, 25, 25, 25, 50, 25, 25, 50, 50, 75, 75, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 25, 25, 25, 50, 25, 25, 25, 25, 50, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 25, 25, 25, 50, 25, 25, 25, 25, 50, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 25, 50, 25, 25, 25, 50, 50, 50, 50, 25, 50, 0, 0] , [0, 0, 0, 0, 0, 25, 50, 50, 0, 0, 0, 25, 50, 75, 50, 50, 50, 50, 50, 50, 50, 25, 25, 50, 25, 25, 25, 25] , [0, 0, 0, 0, 0, 25, 100, 50, 25, 25, 50, 50, 50, 50, 25, 50, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 50] , [0, 0, 0, 0, 0, 25, 100, 75, 25, 50, 50, 25, 25, 25, 25, 50, 25, 25, 25, 50, 50, 25, 25, 25, 25, 25, 25, 25] , [0, 0, 0, 0, 0, 75, 100, 100, 25, 50, 50, 25, 50, 50, 50, 50, 25, 25, 25, 25, 50, 50, 25, 50, 50, 50, 50, 25] , [0, 0, 0, 0, 0, 75, 100, 125, 125, 125, 125, 125, 100, 75, 50, 50, 25, 50, 50, 75, 75, 50, 50, 50, 50, 0, 0, 0] , [0, 0, 0, 0, 0, 75, 100, 25, 50, 75, 50, 75, 125, 75, 75, 50, 50, 50, 25, 75, 75, 50, 50, 75, 50, 0, 0, 0] , [0, 0, 0, 0, 25, 75, 75, 50, 75, 75, 75, 75, 125, 50, 75, 25, 100, 100, 75, 75, 75, 75, 75, 75, 50, 0, 0, 0] , [0, 50, 50, 75, 75, 25, 50, 50, 50, 75, 75, 50, 100, 50, 50, 100, 125, 100, 50, 50, 50, 75, 50, 50, 50, 0, 0, 0] , [0, 75, 75, 75, 75, 50, 75, 50, 50, 50, 75, 50, 125, 125, 125, 125, 125, 125, 100, 25, 50, 25, 50, 50, 0, 0, 0, 0] , [25, 75, 50, 75, 75, 75, 50, 50, 50, 75, 75, 75, 50, 75, 50, 100, 25, 100, 125, 75, 100, 100, 75, 25, 50, 0, 0, 0] , [50, 75, 75, 75, 75, 75, 75, 75, 0, 0, 75, 75, 50, 50, 50, 125, 100, 25, 125, 125, 125, 125, 100, 100, 25, 0, 0, 0] , [50, 75, 75, 75, 75, 75, 75, 0, 0, 0, 50, 50, 25, 50, 100, 125, 25, 50, 125, 100, 25, 25, 75, 100, 0, 0, 0, 0] , [0, 0, 50, 50, 75, 75, 0, 0, 0, 0, 75, 50, 25, 100, 125, 100, 50, 50, 125, 50, 50, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 100, 125, 25, 25, 25, 25, 125, 50, 50, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 125, 50, 50, 50, 50, 25, 125, 100, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 25, 25, 100, 125, 25, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 50, 75, 50, 25, 25, 125, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_past_ps.tif to javascript
var pts_past_ps = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 150, 150, 200, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 200, 250, 200, 150, 250, 150, 100, 50, 200, 100, 100, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 100, 250, 200, 150, 150, 150, 50, 100, 100, 100, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 100, 50, 100, 50, 50, 150, 150, 150, 200, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 150, 50, 100, 100, 50, 100, 150, 200, 100, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 200, 150, 150, 150, 100, 50, 50, 150, 250, 200, 150, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 250, 150, 100, 100, 150, 100, 50, 50, 250, 150, 100, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 250, 100, 150, 200, 50, 50, 50, 250, 100, 150, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 250, 250, 250, 250, 200, 150, 150, 50, 150, 200, 250, 200, 150, 150, 0, 0] , [0, 0, 0, 0, 0, 250, 250, 100, 0, 0, 0, 100, 150, 200, 100, 250, 250, 100, 250, 200, 50, 200, 150, 100, 100, 50, 50, 250] , [0, 0, 0, 0, 0, 250, 50, 200, 250, 150, 100, 150, 200, 250, 50, 100, 200, 100, 200, 250, 100, 50, 150, 100, 50, 50, 50, 200] , [0, 0, 0, 0, 250, 250, 50, 50, 200, 250, 150, 250, 200, 150, 100, 50, 250, 200, 100, 250, 200, 50, 100, 200, 150, 50, 50, 200] , [0, 0, 0, 0, 0, 50, 50, 50, 100, 150, 100, 100, 250, 250, 200, 100, 250, 200, 150, 100, 100, 150, 150, 200, 150, 200, 250, 100] , [0, 0, 0, 0, 0, 50, 50, 50, 100, 50, 100, 100, 100, 200, 250, 250, 250, 200, 250, 250, 150, 200, 200, 250, 200, 200, 0, 0] , [0, 0, 0, 0, 250, 100, 50, 100, 250, 150, 150, 150, 50, 200, 100, 250, 100, 250, 150, 150, 200, 200, 200, 150, 150, 0, 0, 0] , [0, 0, 0, 0, 250, 100, 50, 100, 100, 200, 250, 100, 100, 150, 200, 250, 50, 250, 250, 150, 100, 150, 200, 150, 250, 0, 0, 0] , [0, 200, 50, 50, 50, 50, 100, 250, 200, 250, 150, 150, 200, 150, 150, 250, 150, 50, 250, 250, 150, 200, 100, 50, 200, 0, 0, 0] , [0, 200, 50, 50, 0, 50, 250, 200, 100, 250, 100, 100, 200, 100, 150, 200, 250, 50, 50, 100, 200, 150, 50, 100, 0, 0, 0, 0] , [250, 200, 50, 50, 50, 150, 200, 200, 250, 250, 250, 200, 250, 150, 200, 200, 150, 200, 50, 50, 50, 50, 50, 50, 250, 0, 0, 0] , [250, 200, 50, 50, 250, 200, 150, 250, 0, 0, 200, 200, 200, 200, 100, 100, 100, 250, 50, 50, 50, 50, 50, 50, 250, 0, 0, 0] , [250, 250, 150, 100, 100, 250, 250, 0, 0, 0, 100, 100, 150, 200, 250, 150, 150, 200, 50, 50, 250, 250, 50, 50, 0, 0, 0, 0] , [0, 0, 250, 100, 50, 200, 0, 0, 0, 0, 100, 150, 50, 150, 150, 150, 250, 250, 100, 200, 200, 150, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 50, 150, 150, 200, 250, 250, 200, 150, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 200, 150, 200, 150, 250, 100, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 200, 150, 100, 150, 250, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 200, 150, 150, 100, 100, 50, 200, 200, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 150, 150, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_pshq.tif to javascript
var pts_pshq = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 25, 100, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 25, 50, 50, 75, 100, 100, 100, 75, 50, 100, 100, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 75, 50, 25, 25, 50, 50, 100, 100, 25, 100, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 50, 100, 100, 50, 25, 100, 75, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 50, 100, 75, 100, 25, 50, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 75, 100, 100, 50, 50, 75, 100, 100, 100, 25, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 100, 100, 100, 50, 100, 100, 50, 25, 25, 100, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 50, 100, 100, 50, 0, 25, 100, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 25, 50, 75, 100, 50, 100, 100, 50, 25, 0, 25, 100, 50, 25, 0, 0] , [0, 0, 0, 0, 0, 0, 50, 100, 0, 0, 0, 50, 25, 50, 25, 25, 25, 50, 50, 50, 25, 0, 100, 25, 0, 0, 0, 50] , [0, 0, 0, 0, 0, 0, 0, 25, 25, 75, 100, 100, 50, 50, 50, 50, 100, 100, 100, 25, 50, 75, 25, 0, 0, 0, 0, 100] , [0, 0, 0, 0, 0, 0, 0, 0, 100, 25, 25, 25, 25, 100, 75, 25, 100, 100, 100, 100, 50, 100, 0, 50, 50, 0, 0, 100] , [0, 0, 0, 0, 0, 0, 0, 0, 50, 100, 100, 25, 50, 25, 50, 0, 100, 100, 100, 75, 25, 25, 75, 50, 100, 100, 100, 100] , [0, 0, 0, 0, 0, 0, 0, 0, 25, 100, 100, 50, 100, 100, 100, 25, 25, 25, 25, 25, 25, 50, 100, 25, 25, 100, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 50, 100, 100, 50, 25, 0, 25, 75, 100, 50, 100, 100, 50, 100, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 25, 25, 25, 25, 25, 100, 0, 50, 25, 0, 0, 50, 50, 25, 25, 0, 0, 0] , [0, 50, 0, 0, 0, 0, 100, 25, 75, 75, 50, 100, 75, 25, 50, 100, 25, 0, 75, 50, 50, 75, 25, 25, 50, 0, 0, 0] , [0, 50, 0, 0, 0, 0, 100, 50, 100, 100, 50, 100, 50, 100, 50, 100, 100, 0, 50, 50, 0, 75, 0, 0, 0, 0, 0, 0] , [100, 50, 0, 0, 0, 0, 25, 25, 75, 100, 25, 25, 50, 50, 25, 100, 100, 50, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0] , [0, 25, 75, 0, 75, 75, 100, 100, 0, 0, 25, 100, 100, 50, 50, 100, 100, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0] , [100, 75, 100, 100, 100, 75, 100, 0, 0, 0, 25, 100, 100, 50, 25, 50, 100, 50, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 100, 75, 25, 50, 0, 0, 0, 0, 0, 50, 100, 75, 0, 0, 25, 25, 25, 25, 50, 100, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 50, 25, 25, 25, 50, 25, 50, 25, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 75, 50, 25, 50, 50, 50, 50, 100, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 50, 100, 100, 100, 100, 50, 100, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 25, 25, 75, 100, 100, 75, 100, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 25, 50, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
// the following is automatically generated by tif_to_js.py and converts the gis file pts_pswq.tif to javascript
var pts_pswq = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 0, 0, 0, 0, 0, 0, 25, 0, 25, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 25, 25, 25, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 25, 0, 0, 25, 25, 50, 50, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 25, 0, 0, 0, 0, 25, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 25, 0, 0, 0, 0, 25, 25, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 0, 25, 0, 0, 0, 25, 25, 25, 25, 0, 25, 0, 0] , [0, 0, 0, 0, 0, 0, 25, 25, 0, 0, 0, 0, 25, 50, 25, 25, 25, 25, 25, 25, 25, 0, 0, 25, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 75, 25, 0, 0, 25, 25, 25, 25, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25] , [0, 0, 0, 0, 0, 0, 75, 50, 0, 25, 25, 0, 0, 0, 0, 25, 0, 0, 0, 25, 25, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 50, 75, 75, 0, 25, 25, 0, 25, 25, 25, 25, 0, 0, 0, 0, 25, 25, 0, 25, 25, 25, 25, 0] , [0, 0, 0, 0, 0, 50, 75, 100, 100, 100, 100, 100, 75, 50, 25, 25, 0, 25, 25, 50, 50, 25, 25, 25, 25, 0, 0, 0] , [0, 0, 0, 0, 0, 50, 75, 0, 25, 50, 25, 50, 100, 50, 50, 25, 25, 25, 0, 50, 50, 25, 25, 50, 25, 0, 0, 0] , [0, 0, 0, 0, 0, 50, 50, 25, 50, 50, 50, 50, 100, 25, 50, 0, 75, 75, 50, 50, 50, 50, 50, 50, 25, 0, 0, 0] , [0, 25, 25, 50, 50, 0, 25, 25, 25, 50, 50, 25, 75, 25, 25, 75, 100, 75, 25, 25, 25, 50, 25, 25, 25, 0, 0, 0] , [0, 50, 50, 50, 50, 25, 50, 25, 25, 25, 50, 25, 100, 100, 100, 100, 100, 100, 75, 0, 25, 0, 25, 25, 0, 0, 0, 0] , [0, 50, 25, 50, 50, 50, 25, 25, 25, 50, 50, 50, 25, 50, 25, 75, 0, 75, 100, 50, 75, 75, 50, 0, 25, 0, 0, 0] , [25, 50, 50, 50, 50, 50, 50, 50, 0, 0, 50, 50, 25, 25, 25, 100, 75, 0, 100, 100, 100, 100, 75, 75, 0, 0, 0, 0] , [25, 50, 50, 50, 50, 50, 50, 0, 0, 0, 25, 25, 0, 25, 75, 100, 0, 25, 100, 75, 0, 0, 50, 75, 0, 0, 0, 0] , [0, 0, 25, 25, 50, 50, 0, 0, 0, 0, 50, 25, 0, 75, 100, 75, 25, 25, 100, 25, 25, 25, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 75, 100, 0, 0, 0, 0, 100, 25, 25, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 100, 25, 25, 25, 25, 0, 100, 75, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 0, 0, 75, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 25, 50, 25, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] , [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];

//Helper functions. Because this is dumb.

//re-doing indexOf, because it can't check an array within an array.
//This is now VERY SPECIFIC to checking for sub-arrays within arrays.
//DO NOT USE FOR ANYTHING ELSE.
Array.prototype.indexOf = function(obj){
    //Test if the array contains an object.

    var contains = -1;

    for (var index = 0; index < this.length; index++){

        sub_array = this[index];
        if (sub_array[0] === obj[0] && sub_array[1] === obj[1]){
                contains = index;            
            }
    }
    
    return contains;
};

Array.prototype.contains = function(obj){
    //Test if the array contains an object.

    var index = this.indexOf(obj);

    if (index === -1){return false;}
    else {return true;}
};

Array.prototype.remove = function(obj){
    //Remove an object by reference.

    var index = this.indexOf(obj);
    this.splice(index, 1);
};

var example = function() {
    var farm_values = [[12,14],[21,10],[26,12],[3,18]];
    var f_table = document.getElementById("farms");

    for (var f_row_index = 1; f_row_index <= farm_values.length; f_row_index++) {
    	var f_row = f_table.rows[f_row_index];
        //Array is indexed started at 0, but we're using indexes starting at 1
        //from the table.
        f_row.cells[1].firstChild.value = farm_values[f_row_index-1][0];
        f_row.cells[2].firstChild.value = farm_values[f_row_index-1][1];
    }
    
    var ranch_values = [[24,15],[13,18],[10,18],[5,17]];
    var r_table = document.getElementById("ranching");
    
    for (var r_row_index = 1; r_row_index <= ranch_values.length; r_row_index++) {
    	var r_row = r_table.rows[r_row_index];
        r_row.cells[1].firstChild.value = ranch_values[r_row_index-1][0];
        r_row.cells[2].firstChild.value = ranch_values[r_row_index-1][1];
    }
    
    var sa_values = [[10,10],[12,15]];
    var sa_table = document.getElementById("setasides");

    for (var sa_row_index = 1; sa_row_index <= sa_values.length; sa_row_index++) {
    	var sa_row = sa_table.rows[sa_row_index];
        sa_row.cells[1].firstChild.value = sa_values[sa_row_index-1][0];
        sa_row.cells[2].firstChild.value = sa_values[sa_row_index-1][1];
    }
};

var clearText = function () {

    var inputs = document.getElementsByTagName('input');

    for (var i = 0; i < inputs.length; i++) {
        inputs[i].value = "";
    }
};

var calculate = function () {

    var f_table = document.getElementById("farms");
    var f_pairs = [];

    //Only want the rows that actually contain the data, not label rows.
    for (var f_row_index = 1; f_row_index < 5; f_row_index++) {
	    var f_row = f_table.rows[f_row_index];
        //.cells[1] gets the <td>, then firstChild gets the <input> inside that,
        //and then .value gets the number inside.
        var x = f_row.cells[1].firstChild.value;
        var y = f_row.cells[2].firstChild.value;
        if (x !== '' && y !== ''){
            f_pairs.push([parseInt(x), parseInt(y)]);
        }
    }

    var r_table = document.getElementById("ranching");
    var r_pairs = [];

    for (var r_row_index = 1; r_row_index < 5; r_row_index++){
        var r_row = r_table.rows[r_row_index];
        var x = r_row.cells[1].firstChild.value;
        var y = r_row.cells[2].firstChild.value;
        if (x !== '' && y !== ''){
            r_pairs.push([parseInt(x), parseInt(y)]);
        }
    }
    
    var sa_table = document.getElementById("setasides");
    var sa_pairs = [];

    for (var sa_row_index = 1; sa_row_index < 6; sa_row_index++){
        var sa_row = sa_table.rows[sa_row_index];
        var x = sa_row.cells[1].firstChild.value;
        var y = sa_row.cells[2].firstChild.value;
        if (x !== '' && y !== ''){
            sa_pairs.push([parseInt(x), parseInt(y)]);
        }
    }

    var concat_pairs = function(p_array){
    
        //Using an arbitrary array for length, since we know they're all the same dimensions. 
        var board_width = pts_crop_ag[0].length, board_length = pts_crop_ag.length;
        //Making a temp new array, since we don't want to iterate over these
        //as well when we're adding squares around.
        var new_pairs = [];

        for (var pair_index = 0; pair_index < p_array.length; pair_index++){

            var pair = p_array[pair_index];
            var x = pair[0], y = pair[1]; 
            var extra_coords = [[x+1, y], [x, y+1], [x+1, y+1]];

            for (var np_index = 0; np_index < extra_coords.length; np_index++){
                var new_pair = extra_coords[np_index];
                
                //Want to check two things:
                //1. That the new coordinate pair doesn't already exist within the
                //pairs to be calculated.
                //2. That the new coordinates are not out of bounds. At worst, current
                //pair x or y would be at board_size (indicies start at [1, 1]). 
                //So since we're only doing 1 sq. each way, need only check if 
                //x or y now == board size + 1. 
                if (!p_array.contains(new_pair) && 
                            (!(x+1 === board_width+1) || !(y+1 === board_length+1))){
                    
                    new_pairs.push(new_pair);
                }
            }
        }
        
        var all_pairs = p_array.concat(new_pairs);
        
        return all_pairs;
    };

    //Reassign farming and ranching to their updated sets of coords. 
    f_pairs = concat_pairs(f_pairs);
    r_pairs = concat_pairs(r_pairs);

    //For every set aside, want to remove only that square from the sets that are being used.
    for (var pair_index = 0; pair_index < sa_pairs.length; pair_index++){

        var pair = sa_pairs[pair_index];
        
        if (f_pairs.contains(pair)){f_pairs.remove(pair);}
        if (r_pairs.contains(pair)){r_pairs.remove(pair);}
    }

    //If a coordinate is in both coordinate arrays, remove it from ranching, and leave it in ag (farming)
    for (var pair_index = 0; pair_index < f_pairs.length; pair_index++){
        var pair = f_pairs[pair_index];
        
        if (r_pairs.contains(pair)){
            r_pairs.remove(pair);
            
        }
    }

    //Now, to do all of the totaling. Need to keep in mind that x, y started at (1,1)
    //THE ARRAY IS INDEXED BY ROW, COL. NEED TO FLIP X AND Y WHEN INDEXING INTO THEM, SINCE
    //THAT WOULD BE COL, ROW.
    //Farming/Ag totals
    var ag_total = 0;
    for (var pair_index = 0; pair_index < f_pairs.length; pair_index++){
        var pair = f_pairs[pair_index];
        var x = pair[0]-1, y = pair[1]-1;
        ag_total += pts_crop_ag[y][x];
    }   
    document.getElementById("a_total").value = ag_total;

    var r_total = 0;
    for (var pair_index = 0; pair_index < r_pairs.length; pair_index++){
        var pair = r_pairs[pair_index];
        var x = pair[0]-1, y = pair[1]-1;
        r_total += pts_past_ps[y][x];
    }   
    document.getElementById("r_total").value = r_total;

    //Total Positive
    var total_pos = ag_total + r_total;
    document.getElementById("pos_total").value = total_pos;

    //Get score (that will be negative) for any of the service maps
    var get_map_score = function(p_array, map_array){
        
        map_total = 0;

        for (pair_index = 0; pair_index < p_array.length; pair_index++){
            var pair = p_array[pair_index];
            var x = pair[0]-1, y = pair[1]-1;

            map_total += map_array[y][x];
        }
        return map_total;
    }

    var hq_total = get_map_score(f_pairs, pts_aghq) + get_map_score(r_pairs, pts_pshq);
    document.getElementById("hq_total").value = hq_total;

    var c_total = get_map_score(f_pairs, pts_agcarb) + get_map_score(r_pairs, pts_pscarb);
    document.getElementById("c_total").value = c_total;

    var hf_total = get_map_score(f_pairs, pts_agrec) + get_map_score(r_pairs, pts_psrec);
    document.getElementById("hf_total").value = hf_total;

    var wq_total = get_map_score(f_pairs, pts_agwq) + get_map_score(r_pairs, pts_pswq);
    document.getElementById("wq_total").value = wq_total;

    //Total negative
    var neg_total = hq_total + c_total + hf_total + wq_total;
    document.getElementById("neg_total").value = neg_total;

    //Total Overall
    var final_total = total_pos - neg_total;
    document.getElementById("score").value = final_total;

};
